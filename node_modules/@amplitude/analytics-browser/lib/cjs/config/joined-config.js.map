{"version":3,"file":"joined-config.js","sourceRoot":"","sources":["../../../src/config/joined-config.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserConfig as IBrowserConfig, BrowserRemoteConfig } from '@amplitude/analytics-types';\nimport { createRemoteConfigFetch, RemoteConfigFetch } from '@amplitude/analytics-remote-config';\nimport { RequestMetadata } from '@amplitude/analytics-core';\n\nexport class BrowserJoinedConfigGenerator {\n  // Local config before generateJoinedConfig is called\n  // Joined config after generateJoinedConfig is called\n  config: IBrowserConfig;\n  remoteConfigFetch: RemoteConfigFetch<BrowserRemoteConfig> | undefined;\n\n  constructor(localConfig: IBrowserConfig) {\n    this.config = localConfig;\n    this.config.loggerProvider.debug(\n      'Local configuration before merging with remote config',\n      JSON.stringify(this.config, null, 2),\n    );\n  }\n\n  async initialize() {\n    this.remoteConfigFetch = await createRemoteConfigFetch<BrowserRemoteConfig>({\n      localConfig: this.config,\n      configKeys: ['analyticsSDK'],\n    });\n  }\n\n  async generateJoinedConfig(): Promise<IBrowserConfig> {\n    try {\n      const remoteConfig =\n        this.remoteConfigFetch &&\n        (await this.remoteConfigFetch.getRemoteConfig('analyticsSDK', 'browserSDK', this.config.sessionId));\n      this.config.loggerProvider.debug('Remote configuration:', JSON.stringify(remoteConfig, null, 2));\n\n      // merge remoteConfig.autocapture and this.config.autocapture\n      // if a field is in remoteConfig.autocapture, use that value\n      // if a field is not in remoteConfig.autocapture, use the value from this.config.autocapture\n      if (remoteConfig && 'autocapture' in remoteConfig) {\n        if (typeof remoteConfig.autocapture === 'boolean') {\n          this.config.autocapture = remoteConfig.autocapture;\n        }\n\n        if (typeof remoteConfig.autocapture === 'object') {\n          if (this.config.autocapture === undefined) {\n            this.config.autocapture = remoteConfig.autocapture;\n          }\n\n          if (typeof this.config.autocapture === 'boolean') {\n            this.config.autocapture = {\n              attribution: this.config.autocapture,\n              fileDownloads: this.config.autocapture,\n              formInteractions: this.config.autocapture,\n              pageViews: this.config.autocapture,\n              sessions: this.config.autocapture,\n              elementInteractions: this.config.autocapture,\n              ...remoteConfig.autocapture,\n            };\n          }\n\n          if (typeof this.config.autocapture === 'object') {\n            this.config.autocapture = {\n              ...this.config.autocapture,\n              ...remoteConfig.autocapture,\n            };\n          }\n        }\n\n        // Override default tracking options if autocapture is updated by remote config\n        this.config.defaultTracking = this.config.autocapture;\n      }\n\n      this.config.loggerProvider.debug('Joined configuration: ', JSON.stringify(this.config, null, 2));\n      this.config.requestMetadata ??= new RequestMetadata();\n      if (this.remoteConfigFetch?.metrics.fetchTimeAPISuccess) {\n        this.config.requestMetadata.recordHistogram(\n          'remote_config_fetch_time_API_success',\n          this.remoteConfigFetch.metrics.fetchTimeAPISuccess,\n        );\n      }\n      if (this.remoteConfigFetch?.metrics.fetchTimeAPIFail) {\n        this.config.requestMetadata.recordHistogram(\n          'remote_config_fetch_time_API_fail',\n          this.remoteConfigFetch.metrics.fetchTimeAPIFail,\n        );\n      }\n    } catch (e) {\n      this.config.loggerProvider.error('Failed to fetch remote configuration because of error: ', e);\n    }\n\n    return this.config;\n  }\n}\n\nexport const createBrowserJoinedConfigGenerator = async (localConfig: IBrowserConfig) => {\n  const joinedConfigGenerator = new BrowserJoinedConfigGenerator(localConfig);\n  await joinedConfigGenerator.initialize();\n  return joinedConfigGenerator;\n};\n"]}