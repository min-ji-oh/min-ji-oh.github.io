import{_ as e,c as a,o as l,ag as r}from"./chunks/framework.DPDPlp3K.js";const h=JSON.parse('{"title":"상태 관리(State Management)란?","description":"","frontmatter":{},"headers":[],"relativePath":"modern/state.md","filePath":"modern/state.md"}'),o={name:"modern/state.md"};function s(d,t,n,i,u,g){return l(),a("div",null,t[0]||(t[0]=[r('<h1 id="상태-관리-state-management-란" tabindex="-1">상태 관리(State Management)란? <a class="header-anchor" href="#상태-관리-state-management-란" aria-label="Permalink to &quot;상태 관리(State Management)란?&quot;">​</a></h1><ul><li><strong>상태 관리</strong>는 애플리케이션에서 <strong>데이터(상태)를 효율적으로 저장하고 업데이트하는 기법</strong> 특히 <strong>프론트엔드 개발</strong>에서 중요한 개념으로, UI와 데이터의 일관성을 유지하는 데 필수적입니다.</li></ul><ol><li><strong>상태(State)란?</strong></li></ol><ul><li><strong>&gt;</strong> 애플리케이션이 특정 시점에 가지고 있는 <strong>데이터의 집합</strong></li></ul><p><strong>ex)</strong> 로그인 여부, 장바구니 목록, 입력 폼 데이터, API에서 받아온 사용자 정보</p><h2 id="flux-패턴-등장" tabindex="-1">Flux 패턴 등장 <a class="header-anchor" href="#flux-패턴-등장" aria-label="Permalink to &quot;Flux 패턴 등장&quot;">​</a></h2><ul><li>단방향으로 데이터 흐름을 변경하게 됨</li></ul><h2 id="상태관리의-필요성-지역-상태-usestate-vs-전역-상태-store" tabindex="-1">상태관리의 필요성 (지역 상태(useState) vs 전역 상태(store)) <a class="header-anchor" href="#상태관리의-필요성-지역-상태-usestate-vs-전역-상태-store" aria-label="Permalink to &quot;상태관리의 필요성 (지역 상태(useState) vs 전역 상태(store))&quot;">​</a></h2><ol><li><strong>지역 상태의 한계</strong></li></ol><p>→ useState, useReducer는 개별 컴포넌트에서만 관리 가능하지만,</p><p>여러 컴포넌트에서 동일한 상태를 공유하려면 상태를 끌어올리거나(props drilling), Context API를 사용해야 함.</p><p>Context API는 상태 주입을 위한 용도(Props drilling 보완)로 사용되므로 상태 관리의 목적과 다름.</p><ol start="2"><li><strong>전역 상태 관리의 필요성</strong></li></ol><p>→ 컴포넌트 외부에서 상태를 관리하는 store 개념이 필요하며, 이를 위해 Recoil, Jotai, Zustand 같은 라이브러리가 등장함.</p><ol start="3"><li><strong>라이브러리별 차이점</strong></li></ol><p>→ Recoil은 페이스북이 만든 공식적인 라이브러리, Jotai는 더 간결한 API를 제공, Zustand는 Redux와 유사한 패턴으로 가볍고 빠름.</p><h2 id="주요-상태-관리-라이브러리-비교" tabindex="-1">주요 상태 관리 라이브러리 비교 <a class="header-anchor" href="#주요-상태-관리-라이브러리-비교" aria-label="Permalink to &quot;주요 상태 관리 라이브러리 비교&quot;">​</a></h2><table tabindex="0"><thead><tr><th>라이브러리</th><th>특징</th><th>장점</th><th>단점</th></tr></thead><tbody><tr><td><strong>React useState</strong></td><td>컴포넌트 내부에서 상태 관리</td><td>간단함, 빠름</td><td>전역 상태 관리 어려움</td></tr><tr><td><strong>Redux</strong></td><td>Flux 아키텍처 기반 상태 관리</td><td>강력한 전역 상태 관리, DevTools 지원</td><td>설정이 복잡함</td></tr><tr><td><strong>Recoil</strong></td><td>원자(atom) 기반 상태 관리</td><td>간편한 전역 상태 관리, 직관적</td><td>아직 성숙하지 않음, 업데이트가 활발하지 않음</td></tr><tr><td><strong>MobX</strong></td><td>관찰 가능한 상태 기반 관리</td><td>코드가 간결함</td><td>디버깅 어려움</td></tr><tr><td><strong>Zustand</strong></td><td>미니멀한 상태 관리 라이브러리</td><td>Redux보다 간단, 빠름</td><td>기능이 제한적</td></tr></tbody></table><hr><details class="details custom-block"><summary>현재 우리가 사용하는 라이브러리 , ZUSTAND 를 선택한 이유</summary><ol><li>가볍고 빠릅니다. <ul><li>Redux보다 <a href="https://coding-grandpa.tistory.com/2" target="_blank" rel="noreferrer">보일러플레이트</a> 코드가 적다</li><li>Recoil보다 구조가 단순해서 성능이 좋음</li></ul></li><li>직관적인 API <ul><li>immer기반의 set함수로 상태를 쉽게 업데이트할 수 있고, React의 기본적인 상태관리방식와 비슷해서 학습 쉬움</li></ul></li><li>선언적 사용 가능 <ul><li>zustand의 subscribe 기능을 이용하면 Redux처럼 외부에서도 상태를 제어할 수 있고 context없이도 전역 상태를 관리 가능</li></ul></li><li>불필요한 리렌더링 최소화 <ul><li>zustand는 필요한 상태만 구독하는 방식이라 불필요한 렌더링이 적어 성능 최적화에 유리함</li></ul></li><li>서버사이드 지원 <ul><li>Next.js 같은 환경에서도 쉽게 사용이 가능하다</li></ul></li><li>추가로.. Redux 다음으로 많이 쓰는 라이브러리!!</li></ol></details>',20)]))}const m=e(o,[["render",s]]);export{h as __pageData,m as default};
